
import static org.apiguardian.api.API.Status.MAINTAINED;
import static org.junit.platform.engine.TestExecutionResult.Status.*;

import java.util.HashMap;
import java.util.Map;

import org.apiguardian.api.API;
import org.junit.platform.commons.PreconditionViolationException;
import org.junit.platform.engine.TestExecutionResult;
import org.junit.platform.launcher.TestExecutionListener;
import org.junit.platform.launcher.TestIdentifier;
import org.junit.platform.launcher.TestPlan;

/**
 * Simple {@link TestExecutionListener} that print report of the test execution.
 *
 * @since 1.0
 * @see #printReport()
 */
@API(status = MAINTAINED, since = "1.0")
public class TestResultListener implements TestExecutionListener {

    private TestPlan testPlan;
    private int score = 0;
    private int overall = 0;
    private HashMap<TestIdentifier, TestExecutionResult.Status> results = new HashMap<>();
    private HashMap<TestIdentifier, Integer> point_map = new HashMap<>();

    private static HashMap<TestExecutionResult.Status, String> statusStringHashMap = new HashMap<>(
            Map.of(SUCCESSFUL, "Passed",
                    FAILED, "Failed",
                    ABORTED, "Failed")
    );



    /**
     * Get the summary generated by this listener.
     */
    public void printReport() {

        System.out.println("\n<=========================== Score Reports ===========================>");
        System.out.println(("|--"));
        int passed = 0;
        int failed = 0;


        results.forEach((k, v) -> {
            System.out.printf("\t| -> Test %s (%d points): %s\n",
                    k.getLegacyReportingName(), point_map.get(k), statusStringHashMap.get(v));
        });

        System.out.printf("\nFinal Score: %d / %d (%.2f%%)", score, overall, (double)score / (double)overall * 100);


    }

    @Override
    public void testPlanExecutionStarted(TestPlan testPlan) {
        this.testPlan = testPlan;
    }

    @Override
    public void testPlanExecutionFinished(TestPlan testPlan) {
    }

    @Override
    public void dynamicTestRegistered(TestIdentifier testIdentifier) {

    }

    @Override
    public void executionSkipped(TestIdentifier testIdentifier, String reason) {

    }

    @Override
    public void executionStarted(TestIdentifier testIdentifier) {
        if (testIdentifier.isTest()) {
//            counter ++;
            System.out.println("\n" + testIdentifier.getLegacyReportingName());
        }
    }

    @Override
    public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
        if (testIdentifier.isTest()) 
        {
            results.put(testIdentifier, testExecutionResult.getStatus());

            int point = Integer.parseInt(testIdentifier.getDisplayName());
            overall += point;
            point_map.put(testIdentifier, point);
            if (testExecutionResult.getStatus() == SUCCESSFUL)
                score += point;
            else if (testExecutionResult.getStatus() != FAILED
                    && testExecutionResult.getStatus() != ABORTED) 
                throw new PreconditionViolationException("Unknown result");
        }
    }

}